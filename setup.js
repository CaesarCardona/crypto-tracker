const fs = require("fs");const { execSync } = require("child_process");function writeFile(path, content) {  fs.mkdirSync(require("path").dirname(path), { recursive: true });  fs.writeFileSync(path, content);}function log(msg) {  console.log(`[+] ${msg}`);}log("Creating folder structure...");// .envwriteFile("server/.env", `MONGO_URI=mongodb://localhost:27017/crypto-tracker`);// app.jswriteFile("server/app.js", `const express = require("express");const mongoose = require("mongoose");const cors = require("cors");const dotenv = require("dotenv");const { graphqlHTTP } = require("express-graphql");const schema = require("./graphql/schema");dotenv.config();const app = express();app.use(cors());app.use(express.json());mongoose.connect(process.env.MONGO_URI)  .then(() => console.log("MongoDB connected"))  .catch(err => console.log(err));app.use("/api/coins", require("./routes/coinRoutes"));app.use("/graphql", graphqlHTTP({  schema,  graphiql: true}));app.listen(5000, () => console.log("Server running on http://localhost:5000"));`);// models/User.jswriteFile("server/models/User.js", `const mongoose = require("mongoose");const coinSchema = new mongoose.Schema({  coinId: String,  amount: Number,  buyPrice: Number,  addedAt: {    type: Date,    default: Date.now,  }});const userSchema = new mongoose.Schema({  username: String,  email: String,  passwordHash: String,  coins: [coinSchema]});module.exports = mongoose.model("User", userSchema);`);// routes/coinRoutes.jswriteFile("server/routes/coinRoutes.js", `const express = require("express");const router = express.Router();const User = require("../models/User");router.get("/", async (req, res) => {  const user = await User.findOne({ email: "demo@example.com" });  if (!user) return res.status(404).send("User not found");  res.json(user.coins);});router.post("/", async (req, res) => {  const { coinId, amount, buyPrice } = req.body;  const user = await User.findOne({ email: "demo@example.com" });  user.coins.push({ coinId, amount, buyPrice });  await user.save();  res.status(201).send("Coin added");});module.exports = router;`);// services/coinGecko.jswriteFile("server/services/coinGecko.js", `const axios = require("axios");async function getCurrentPrice(coinId) {  const url = \`https://api.coingecko.com/api/v3/simple/price?ids=\${coinId}&vs_currencies=usd\`;  const res = await axios.get(url);  return res.data[coinId]?.usd;}module.exports = { getCurrentPrice };`);// graphql/schema.jswriteFile("server/graphql/schema.js", `const {  GraphQLObjectType,  GraphQLString,  GraphQLList,  GraphQLSchema,  GraphQLFloat} = require("graphql");const User = require("../models/User");const { getCurrentPrice } = require("../services/coinGecko");const CoinType = new GraphQLObjectType({  name: "Coin",  fields: () => ({    coinId: { type: GraphQLString },    amount: { type: GraphQLFloat },    buyPrice: { type: GraphQLFloat },    currentPrice: { type: GraphQLFloat },    growthPercent: { type: GraphQLFloat },    profitLoss: { type: GraphQLFloat }  })});const RootQuery = new GraphQLObjectType({  name: "RootQueryType",  fields: {    portfolioStats: {      type: new GraphQLList(CoinType),      async resolve() {        const user = await User.findOne({ email: "demo@example.com" });        return Promise.all(user.coins.map(async coin => {          const currentPrice = await getCurrentPrice(coin.coinId);          const growth = ((currentPrice - coin.buyPrice) / coin.buyPrice) * 100;          const profitLoss = (currentPrice - coin.buyPrice) * coin.amount;          return {            ...coin.toObject(),            currentPrice,            growthPercent: parseFloat(growth.toFixed(2)),            profitLoss: parseFloat(profitLoss.toFixed(2))          };        }));      }    }  }});module.exports = new GraphQLSchema({  query: RootQuery});`);log("✅ Files created!");log("Installing packages...");process.chdir("server");execSync("npm init -y", { stdio: "inherit" });execSync("npm install express mongoose axios graphql express-graphql cors dotenv", { stdio: "inherit" });log("✅ Setup complete! Run the app using:");log("   node app.js");
